{"version":3,"sources":["components/HeaderComponent/HeaderComponent.js","components/BioComponent/BioComponent.js","components/ContactComponent/ContactComponent.js","pages/MainPage/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","props","className","BioComponent","ContactComponent","href","MainPage","state","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAaeA,MATf,SAAyBC,GACvB,OACE,yBAAKC,UAAU,mBACb,0BAAMA,UAAU,iBAAhB,kBACA,0BAAMA,UAAU,oBAAhB,qD,YC2BSC,MA/Bf,SAAsBF,GACpB,OACE,yBAAKC,UAAU,gBACb,uBAAGA,UAAU,gBAAb,otB,MCYSE,MAff,SAA0BH,GACxB,OACE,yBAAKC,UAAU,oBACb,gDACA,8DACA,8BACE,uBAAGG,KAAK,mCAAR,WAEF,8BACE,uBAAGA,KAAK,8CAAR,eCSOC,E,2MAbbC,MAAQ,G,wEAGN,OACE,yBAAKL,UAAU,qBACb,kBAAC,EAAD,CAAiBA,UAAU,iBAC3B,kBAAC,EAAD,CAAcA,UAAU,iBACxB,kBAAC,EAAD,CAAkBA,UAAU,sB,GARbM,aCARC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f32e630.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nfunction HeaderComponent(props) {\r\n  return (\r\n    <div className=\"header__wrapper\" >\r\n      <span className=\"header__title\" >josh hedstrom </span>\r\n      <span className=\"header__subtitle\">tech lead - full stack web dev - react and node</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderComponent;\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nfunction BioComponent(props) {\r\n  return (\r\n    <div className=\"bio__wrapper\">\r\n      <p className=\"bio__content\">\r\n        I'm Josh Hedstrom, and I'm a full stack web developer and cybersecurity\r\n        zealot. Currently, I'm the tech lead for a team responsible for\r\n        migrating an enterprise messaging system to AWS/Node.js. I'm also a Web\r\n        Application Security resource. I'm skilled in React, Node, and ES6. I've\r\n        worked with both Redux and React Hooks. I have experience with Angular\r\n        6, Bootstrap, Firebase, Express.js, MySQL, and MongoDB. I've also worked\r\n        in Java and Typescript. Previously, I was the lead front end developer\r\n        working on a complex cost management application for a grocery store\r\n        chain, built principally with React.js. I was also a Senior React\r\n        resource brought in to refactor a custom component library according to\r\n        best practices.\r\n        \r\n        {/* Full Stack Web Development enables me to utilize my\r\n        artistic and logical abilities to thoughtfully engineer precision\r\n        applications that are efficient, intuitive, and maintainable. I'm a hard\r\n        worker and a quick learner; I'm creative, energetic, logical and always\r\n        curious. I am passionate about writing clean code that is easy to read\r\n        and maintain. \r\n        \r\n        When I'm not coding, I enjoy running, music, craft beer,\r\n        and spending time with my family. I currently live in Albuquerque, NM\r\n        with my wife and two kids. */}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BioComponent;\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\n\r\nfunction ContactComponent(props) {\r\n  return (\r\n    <div className=\"contact__wrapper\">\r\n      <span>contact me at:</span>\r\n      <span>josh.hedstrom@protonmail.com</span>\r\n      <span>\r\n        <a href=\"https://github.com/joshhedstrom\">github</a>\r\n      </span>\r\n      <span>\r\n        <a href=\"https://www.linkedin.com/in/josh-hedstrom/\">linkedin</a>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactComponent;\r\n","import React, { Component } from 'react';\r\n\r\nimport HeaderComponent from '../../components/HeaderComponent/HeaderComponent';\r\n\r\nimport './index.css';\r\nimport BioComponent from '../../components/BioComponent/BioComponent';\r\nimport ContactComponent from '../../components/ContactComponent/ContactComponent';\r\n\r\nclass MainPage extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"mainpage__wrapper\">\r\n        <HeaderComponent className=\"scroll-child\" />\r\n        <BioComponent className=\"scroll-child\" />\r\n        <ContactComponent className=\"scroll-child\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\n\r\nimport MainPage from './pages/MainPage';\r\n\r\nfunction App() {\r\n  return <MainPage />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}